{"version":3,"sources":["../../../src/@ionic-native/plugins/globalization/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface GlobalizationOptions {\n  formatLength: string;\n  selector: string;\n}\n\n/**\n * @name Globalization\n * @description\n * This plugin obtains information and performs operations specific to the user's locale, language, and timezone.\n *\n * @deprecated\n * With the [ECMA Internationalization API](https://www.ecma-international.org/ecma-402/1.0/) now supported on iOS, Android and Windows devices, this plugin is not required any more.\n * Migrating from this plugin to the [ECMA Internationalization API](https://www.ecma-international.org/ecma-402/1.0/) is explained in this [Cordova blog post](https://cordova.apache.org/news/2017/11/20/migrate-from-cordova-globalization-plugin.html).\n *\n * @usage\n * ```typescript\n * import { Globalization } from '@ionic-native/globalization';\n *\n * constructor(private globalization: Globalization) { }\n *\n *\n * ...\n *\n *\n * this.globalization.getPreferredLanguage()\n *   .then(res => console.log(res))\n *   .catch(e => console.log(e));\n *\n *\n * ```\n * @interfaces\n * GlobalizationOptions\n */\n@Plugin({\n  pluginName: 'Globalization',\n  plugin: 'cordova-plugin-globalization',\n  pluginRef: 'navigator.globalization',\n  repo: 'https://github.com/apache/cordova-plugin-globalization',\n  platforms: ['Amazon Fire OS', 'Android', 'Browser', 'iOS', 'Windows']\n})\n\nexport class Globalization extends IonicNativePlugin {\n  /**\n   * Returns the BCP-47 compliant language identifier tag to the successCallback with a properties object as a parameter. That object should have a value property with a String value.\n   * @returns {Promise<{value: string}>}\n   */\n  @Cordova()\n  getPreferredLanguage(): Promise<{ value: string }> {\n    return;\n  }\n\n  /**\n   * Returns the BCP 47 compliant locale identifier string to the successCallback with a properties object as a parameter.\n   * @returns {Promise<{value: string}>}\n   */\n  @Cordova()\n  getLocaleName(): Promise<{ value: string }> {\n    return;\n  }\n\n  /**\n   * Converts date to string\n   * @param {Date} date Date you wish to convert\n   * @param options Options for the converted date. Length, selector.\n   * @returns {Promise<{value: string}>} Returns a promise when the date has been converted.\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  dateToString(\n    date: Date,\n    options: GlobalizationOptions\n  ): Promise<{ value: string }> {\n    return;\n  }\n\n  /**\n   * Parses a date formatted as a string, according to the client's user preferences and calendar using the time zone of the client, and returns the corresponding date object.\n   * @param {string} dateString Date as a string to be converted\n   * @param options Options for the converted date. Length, selector.\n   * @returns {Promise<{ year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number }>} Returns a promise when the date has been converted.\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  stringToDate(\n    dateString: string,\n    options: GlobalizationOptions\n  ): Promise<{\n    year: number;\n    month: number;\n    day: number;\n    hour: number;\n    minute: number;\n    second: number;\n    millisecond: number;\n  }> {\n    return;\n  }\n\n  /**\n   * Returns a pattern string to format and parse dates according to the client's user preferences.\n   * @param options Object with the format length and selector\n   * @returns {Promise<{ pattern: string, timezone: string, utc_offset: number, dst_offset: number }>} Returns a promise.\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getDatePattern(\n    options: GlobalizationOptions\n  ): Promise<{\n    pattern: string;\n    timezone: string;\n    iana_timezone: string;\n    utc_offset: number;\n    dst_offset: number;\n  }> {\n    return;\n  }\n\n  /**\n   * Returns an array of the names of the months or days of the week, depending on the client's user preferences and calendar.\n   * @param options Object with type (narrow or wide) and item (month or days).\n   * @returns {Promise<{value: Array<string>}>} Returns a promise.\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getDateNames(options: {\n    type: string;\n    item: string;\n  }): Promise<{ value: Array<string> }> {\n    return;\n  }\n\n  /**\n   * Indicates whether daylight savings time is in effect for a given date using the client's time zone and calendar.\n   * @param {data} date Date to process\n   * @returns {Promise<{dst: string}>} reutrns a promise with the value\n   */\n  @Cordova()\n  isDayLightSavingsTime(date: Date): Promise<{ dst: string }> {\n    return;\n  }\n\n  /**\n   * Returns the first day of the week according to the client's user preferences and calendar.\n   * @returns {Promise<{value: string}>} returns a promise with the value\n   */\n  @Cordova()\n  getFirstDayOfWeek(): Promise<{ value: string }> {\n    return;\n  }\n\n  /**\n   * Returns a number formatted as a string according to the client's user preferences.\n   * @param numberToConvert {Number} The number to convert\n   * @param options {Object} Object with property `type` that can be set to: decimal, percent, or currency.\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  numberToString(\n    numberToConvert: number,\n    options: { type: string }\n  ): Promise<{ value: string }> {\n    return;\n  }\n\n  /**\n   *\n   * @param {string} stringToConvert String you want to conver to a number\n   * @param options  The type of number you want to return. Can be decimal, percent, or currency.\n   * @returns {Promise<{ value: number | string }>} Returns a promise with the value.\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  stringToNumber(\n    stringToConvert: string,\n    options: { type: string }\n  ): Promise<{ value: number | string }> {\n    return;\n  }\n\n  /**\n   * Returns a pattern string to format and parse numbers according to the client's user preferences.\n   * @param options Can be decimal, percent, or currency.\n   * @returns {Promise<{ pattern: string, symbol: string, fraction: number, rounding: number, positive: string, negative: string, decimal: string, grouping: string }>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getNumberPattern(options: {\n    type: string;\n  }): Promise<{\n    pattern: string;\n    symbol: string;\n    fraction: number;\n    rounding: number;\n    positive: string;\n    negative: string;\n    decimal: string;\n    grouping: string;\n  }> {\n    return;\n  }\n\n  /**\n   * Returns a pattern string to format and parse currency values according to the client's user preferences and ISO 4217 currency code.\n   * @param {string} currencyCode Currency Code.A\n   * @returns {Promise<{ pattern: string, code: string, fraction: number, rounding: number, decimal: number, grouping: string }>}\n   */\n  @Cordova()\n  getCurrencyPattern(\n    currencyCode: string\n  ): Promise<{\n    pattern: string;\n    code: string;\n    fraction: number;\n    rounding: number;\n    decimal: number;\n    grouping: string;\n  }> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}