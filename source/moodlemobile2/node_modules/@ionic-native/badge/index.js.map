{"version":3,"sources":["../../../src/@ionic-native/plugins/badge/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;;;GAmBG;AASH;IAA2B,yBAAiB;IAA5C;;IAiFA,CAAC;IAhFC;;;OAGG;IAEH,qBAAK,GAAL;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,mBAAG,GAAH,UAAI,WAAmB;QACrB,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,mBAAG,GAAH;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,wBAAQ,GAAR,UAAS,UAAkB;QACzB,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,wBAAQ,GAAR,UAAS,UAAkB;QACzB,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,2BAAW,GAAX;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,6BAAa,GAAb;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,iCAAiB,GAAjB;QACE,MAAM,CAAC;IACT,CAAC;IACI,gBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,oBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA1EA;QADC,OAAO,EAAE;;;;sCAGT;IAQD;QADC,OAAO,EAAE;;;;oCAGT;IAOD;QADC,OAAO,EAAE;;;;oCAGT;IAQD;QADC,OAAO,EAAE;;;;yCAGT;IAQD;QADC,OAAO,EAAE;;;;yCAGT;IAOD;QADC,OAAO,EAAE;;;;4CAGT;IAOD;QADC,OAAO,EAAE;;;;8CAGT;IAOD;QADC,OAAO,EAAE;;;;kDAGT;IA1EU,KAAK;QARjB,MAAM,CAAC;YACN,UAAU,EAAE,OAAO;YACnB,MAAM,EAAE,sBAAsB;YAC9B,SAAS,EAAE,oCAAoC;YAC/C,IAAI,EAAE,gDAAgD;YACtD,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACpD,CAAC;OAEW,KAAK,CAiFjB;IAAD,YAAC;CAjFD,AAiFC,CAjF0B,iBAAiB,GAiF3C;SAjFY,KAAK","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\n/**\n * @name Badge\n * @description\n * The essential purpose of badge numbers is to enable an application to inform its users that it has something for them — for example, unread messages — when the application isn’t running in the foreground.\n *\n * Requires Cordova plugin: cordova-plugin-badge. For more info, please see the [Badge plugin docs](https://github.com/katzer/cordova-plugin-badge).\n *\n * @usage\n * ```typescript\n * import { Badge } from '@ionic-native/badge';\n *\n * constructor(private badge: Badge) { }\n *\n * ...\n *\n * this.badge.set(10);\n * this.badge.increase(1);\n * this.badge.clear();\n * ```\n */\n@Plugin({\n  pluginName: 'Badge',\n  plugin: 'cordova-plugin-badge',\n  pluginRef: 'cordova.plugins.notification.badge',\n  repo: 'https://github.com/katzer/cordova-plugin-badge',\n  platforms: ['Android', 'Browser', 'iOS', 'Windows']\n})\n\nexport class Badge extends IonicNativePlugin {\n  /**\n   * Clear the badge of the app icon.\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  clear(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Set the badge of the app icon.\n   * @param {number} badgeNumber  The new badge number.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  set(badgeNumber: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get the badge of the app icon.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  get(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Increase the badge number.\n   * @param {number} increaseBy  Count to add to the current badge number\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  increase(increaseBy: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Decrease the badge number.\n   * @param {number} decreaseBy  Count to subtract from the current badge number\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  decrease(decreaseBy: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Check support to show badges.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  isSupported(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Determine if the app has permission to show badges.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  hasPermission(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Register permission to set badge notifications\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  requestPermission(): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}